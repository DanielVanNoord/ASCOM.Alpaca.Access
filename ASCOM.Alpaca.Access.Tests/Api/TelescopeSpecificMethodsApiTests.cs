/*
 * ASCOM Alpaca Device API
 *
 * The Alpaca API uses RESTful techniques and TCP/IP to enable ASCOM applications and devices to communicate across modern network environments.  ## Interface Behaviour The ASCOM Interface behavioural requirements for Alpaca drivers are the same as for COM based drivers and are documented in the <a href=\"https://ascom-standards.org/Help/Developer/html/N_ASCOM_DeviceInterface.htm\">API Interface Definitions</a> e.g. the <a href=\"https://ascom-standards.org/Help/Developer/html/M_ASCOM_DeviceInterface_ITelescopeV3_SlewToCoordinates.htm\">Telescope.SlewToCoordinates</a> method.       This document focuses on how to use the ASCOM Interface standards in their RESTful Alpaca form. ## Alpaca URLs, Case Sensitivity, Parameters and Returned values **Alpaca Device API URLs** are of the form **http(s)://host:port/path** where path comprises **\"/api/v1/\"** followed by one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89: * A telescope \"Interface Version\" method URL would be **http://192.168.1.89:7843/api/v1/telescope/0/InterfaceVersion**      * A first focuser \"Position\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/0/position**      * A second focuser \"StepSize\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/1/stepsize** * A rotator \"Halt\" method URL would be  **http://192.168.1.89:7843/api/v1/rotator/0/halt**   URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.  For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.  Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number,  the server's transaction number together with any error message and error number. If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.  ## HTTP Status Codes and ASCOM Error codes The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.  Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute. A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.  An HTTP status code of `400` indicates that the device could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.  An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message. ## SetupDialog and Alpaca Device Configuration The SetupDialog method has been omitted from the Alpaca Device API because it presents a user interface rather than returning data. Alpaca device configuration is covered in the \"ASCOM Alpaca Management API\" specification, which can be selected through the drop-down box at the head of this page. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TelescopeSpecificMethodsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TelescopeSpecificMethodsApiTests : IDisposable
    {
        //private TelescopeSpecificMethodsApi instance;

        public TelescopeSpecificMethodsApiTests()
        {
            //instance = new TelescopeSpecificMethodsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TelescopeSpecificMethodsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TelescopeSpecificMethodsApi
            //Assert.IsType<TelescopeSpecificMethodsApi>(instance);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAbortslewPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAbortslewPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberAbortslewPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAlignmentmodeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAlignmentmodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAlignmentmodeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAltitudeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAltitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAltitudeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberApertureareaGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberApertureareaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberApertureareaGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAperturediameterGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAperturediameterGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAperturediameterGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAthomeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAthomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAthomeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAtparkGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAtparkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAtparkGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAxisratesGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAxisratesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int axis = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAxisratesGet(deviceNumber, axis, clientID, clientTransactionID);
            //Assert.IsType<AxisRatesResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberAzimuthGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberAzimuthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberAzimuthGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanfindhomeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanfindhomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanfindhomeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanmoveaxisGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanmoveaxisGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int axis = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanmoveaxisGet(deviceNumber, axis, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanparkGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanparkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanparkGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanpulseguideGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanpulseguideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanpulseguideGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansetdeclinationrateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansetdeclinationrateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansetdeclinationrateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansetguideratesGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansetguideratesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansetguideratesGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansetparkGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansetparkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansetparkGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansetpiersideGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansetpiersideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansetpiersideGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansetrightascensionrateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansetrightascensionrateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansetrightascensionrateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansettrackingGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansettrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansettrackingGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanslewGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanslewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanslewGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanslewaltazGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanslewaltazGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanslewaltazGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanslewaltazasyncGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanslewaltazasyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanslewaltazasyncGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCanslewasyncGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCanslewasyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCanslewasyncGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansyncGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansyncGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberCansyncaltazGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberCansyncaltazGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberCansyncaltazGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDeclinationGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDeclinationrateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDeclinationrateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDeclinationrateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDeclinationratePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDeclinationratePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double declinationRate = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDeclinationratePut(deviceNumber, declinationRate, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDestinationsideofpierGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDestinationsideofpierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //decimal rightAscension = null;
            //decimal declination = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDestinationsideofpierGet(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDoesrefractionGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDoesrefractionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDoesrefractionGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberDoesrefractionPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberDoesrefractionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //bool doesRefraction = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberDoesrefractionPut(deviceNumber, doesRefraction, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberEquatorialsystemGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberEquatorialsystemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberEquatorialsystemGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberFindhomePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberFindhomePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberFindhomePut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberFocallengthGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberFocallengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberFocallengthGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberGuideratedeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberGuideratedeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberGuideratedeclinationGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberGuideratedeclinationPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberGuideratedeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double guideRateDeclination = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberGuideratedeclinationPut(deviceNumber, guideRateDeclination, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberGuideraterightascensionGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberGuideraterightascensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberGuideraterightascensionGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberGuideraterightascensionPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberGuideraterightascensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double guideRateRightAscension = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberGuideraterightascensionPut(deviceNumber, guideRateRightAscension, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberIspulseguidingGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberIspulseguidingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberIspulseguidingGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberMoveaxisPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberMoveaxisPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int axis = null;
            //decimal rate = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberMoveaxisPut(deviceNumber, axis, rate, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberParkPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberParkPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberPulseguidePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberPulseguidePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int direction = null;
            //int duration = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberPulseguidePut(deviceNumber, direction, duration, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberRightascensionGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberRightascensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberRightascensionGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberRightascensionrateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberRightascensionrateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberRightascensionrateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberRightascensionratePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberRightascensionratePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double rightAscensionRate = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberRightascensionratePut(deviceNumber, rightAscensionRate, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSetparkPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSetparkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSetparkPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSideofpierGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSideofpierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSideofpierGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSideofpierPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSideofpierPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int sideOfPier = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSideofpierPut(deviceNumber, sideOfPier, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSiderealtimeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSiderealtimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSiderealtimeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSiteelevationGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSiteelevationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSiteelevationGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSiteelevationPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSiteelevationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double siteElevation = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSiteelevationPut(deviceNumber, siteElevation, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSitelatitudeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSitelatitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSitelatitudeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSitelatitudePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSitelatitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double siteLatitude = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSitelatitudePut(deviceNumber, siteLatitude, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSitelongitudeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSitelongitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSitelongitudeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSitelongitudePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSitelongitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double siteLongitude = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSitelongitudePut(deviceNumber, siteLongitude, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewingGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSlewingGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewsettletimeGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewsettletimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSlewsettletimeGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewsettletimePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewsettletimePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int slewSettleTime = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberSlewsettletimePut(deviceNumber, slewSettleTime, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtoaltazPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtoaltazPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtoaltazPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtoaltazasyncPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtoaltazasyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtoaltazasyncPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtocoordinatesPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtocoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtocoordinatesPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtocoordinatesasyncPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtocoordinatesasyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtocoordinatesasyncPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtotargetPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtotargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtotargetPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSlewtotargetasyncPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSlewtotargetasyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSlewtotargetasyncPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSynctoaltazPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSynctoaltazPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSynctoaltazPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSynctocoordinatesPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSynctocoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSynctocoordinatesPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberSynctotargetPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberSynctotargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberSynctotargetPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTargetdeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTargetdeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTargetdeclinationGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTargetdeclinationPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTargetdeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double targetDeclination = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTargetdeclinationPut(deviceNumber, targetDeclination, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTargetrightascensionGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTargetrightascensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTargetrightascensionGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTargetrightascensionPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTargetrightascensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //double targetRightAscension = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTargetrightascensionPut(deviceNumber, targetRightAscension, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTrackingGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTrackingGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTrackingPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTrackingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //bool tracking = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTrackingPut(deviceNumber, tracking, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTrackingrateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTrackingrateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTrackingrateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTrackingratePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTrackingratePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int trackingRate = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTrackingratePut(deviceNumber, trackingRate, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberTrackingratesGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberTrackingratesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberTrackingratesGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<DriveRatesResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberUnparkPut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberUnparkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
            //var response = instance.TelescopeDeviceNumberUnparkPut(deviceNumber, UNKNOWN_BASE_TYPE);
            //Assert.IsType<MethodResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberUtcdateGet
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberUtcdateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberUtcdateGet(deviceNumber, clientID, clientTransactionID);
            //Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeviceNumberUtcdatePut
        /// </summary>
        [Fact]
        public void TelescopeDeviceNumberUtcdatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int deviceNumber = null;
            //string uTCDate = null;
            //int? clientID = null;
            //int? clientTransactionID = null;
            //var response = instance.TelescopeDeviceNumberUtcdatePut(deviceNumber, uTCDate, clientID, clientTransactionID);
            //Assert.IsType<MethodResponse>(response);
        }
    }
}
