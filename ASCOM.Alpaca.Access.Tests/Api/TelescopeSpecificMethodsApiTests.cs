/*
 * ASCOM Alpaca Simulators
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using ASCOM.Alpaca.Access;
using ASCOM.Alpaca.Responses;
using ASCOM.Standard.Interfaces;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TelescopeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TelescopeApiTests : IDisposable
    {
        private Telescope instance;

        public TelescopeApiTests()
        {
            instance = new Telescope("http://localhost:5000/");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TelescopeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TelescopeApi
            Assert.IsType<Telescope>(instance);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAbortSlewPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAbortSlewPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAbortSlewPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberActionPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberActionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            string action = null;
            string parameters = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberActionPut(deviceNumber, action, parameters, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAlignmentModeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAlignmentModeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAlignmentModeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<AlignmentModeResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAltitudeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAltitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAltitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberApertureAreaGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberApertureAreaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberApertureAreaGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberApertureDiameterGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberApertureDiameterGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberApertureDiameterGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAtHomeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAtHomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAtHomeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAtParkGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAtParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAtParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAxisRatesGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAxisRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAxisRatesGet(deviceNumber, axis, clientID, clientTransactionID);
            Assert.IsType<AxisRatesResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberAzimuthGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberAzimuthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberAzimuthGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanFindHomeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanFindHomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanFindHomeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanMoveAxisGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanMoveAxisGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanMoveAxisGet(deviceNumber, axis, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanParkGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanPulseGuideGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanPulseGuideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanPulseGuideGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetGuideRatesGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetGuideRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetGuideRatesGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetParkGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetPierSideGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetPierSideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetPierSideGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSetTrackingGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSetTrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSetTrackingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSlewAltAzGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSlewAltAzGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSlewAltAzGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSlewAsyncGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSlewAsyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSlewAsyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSlewGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSlewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSlewGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSyncAltAzGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSyncAltAzGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSyncAltAzGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanSyncGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanSyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanSyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCanUnparkGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCanUnparkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCanUnparkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCommandBlindPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCommandBlindPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            string command = null;
            bool? raw = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCommandBlindPut(deviceNumber, command, raw, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCommandBoolPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCommandBoolPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            string command = null;
            bool? raw = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCommandBoolPut(deviceNumber, command, raw, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberCommandStringPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberCommandStringPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            string command = null;
            bool? raw = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberCommandStringPut(deviceNumber, command, raw, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberConnectedGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberConnectedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberConnectedGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberConnectedPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberConnectedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool? connected = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberConnectedPut(deviceNumber, connected, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDeclinationGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDeclinationRateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDeclinationRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDeclinationRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDeclinationRatePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDeclinationRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? declinationRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDeclinationRatePut(deviceNumber, declinationRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDescriptionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDescriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDescriptionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDestinationSideOfPierGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDestinationSideOfPierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDestinationSideOfPierGet(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<PointingStateResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDisposePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDisposePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDisposePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDoesRefractionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDoesRefractionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDoesRefractionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDoesRefractionPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDoesRefractionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool? doesRefraction = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDoesRefractionPut(deviceNumber, doesRefraction, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDriverInfoGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDriverInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDriverInfoGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberDriverVersionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberDriverVersionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberDriverVersionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberEquatorialSystemGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberEquatorialSystemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberEquatorialSystemGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<EquatorialCoordinateTypeResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberFindHomePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberFindHomePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberFindHomePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberFocalLengthGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberFocalLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberFocalLengthGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberGuideRateDeclinationGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberGuideRateDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberGuideRateDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberGuideRateDeclinationPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberGuideRateDeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? guideRateDeclination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberGuideRateDeclinationPut(deviceNumber, guideRateDeclination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? guideRateRightAscension = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut(deviceNumber, guideRateRightAscension, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberInterfaceVersionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberInterfaceVersionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberInterfaceVersionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberIsPulseGuidingGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberIsPulseGuidingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberIsPulseGuidingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberMoveAxisPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberMoveAxisPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            double? rate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberMoveAxisPut(deviceNumber, axis, rate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberNameGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberNameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberNameGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberParkPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberPulseGuidePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberPulseGuidePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            GuideDirection direction = GuideDirection.North;
            int? duration = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberPulseGuidePut(deviceNumber, direction, duration, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberRightAscensionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberRightAscensionRateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberRightAscensionRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberRightAscensionRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberRightAscensionRatePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberRightAscensionRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscensionRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberRightAscensionRatePut(deviceNumber, rightAscensionRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSetParkPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSetParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSetParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSideOfPierGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSideOfPierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSideOfPierGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<PointingStateResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSideOfPierPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSideOfPierPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            PointingState? sideOfPier = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSideOfPierPut(deviceNumber, sideOfPier, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiderealTimeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiderealTimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiderealTimeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteElevationGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteElevationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteElevationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteElevationPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteElevationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteElevation = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteElevationPut(deviceNumber, siteElevation, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteLatitudeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteLatitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteLatitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteLatitudePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteLatitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteLatitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteLatitudePut(deviceNumber, siteLatitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteLongitudeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteLongitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteLongitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSiteLongitudePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSiteLongitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteLongitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSiteLongitudePut(deviceNumber, siteLongitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewSettleTimeGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewSettleTimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewSettleTimeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewSettleTimePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewSettleTimePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? slewSettleTime = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewSettleTimePut(deviceNumber, slewSettleTime, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToAltAzPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToAltAzPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToAltAzPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToCoordinatesPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToCoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToCoordinatesPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewToTargetPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewToTargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewToTargetPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSlewingGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSlewingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSlewingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSupportedActionsGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSupportedActionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSupportedActionsGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringListResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSyncToAltAzPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSyncToAltAzPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSyncToAltAzPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSyncToCoordinatesPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSyncToCoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSyncToCoordinatesPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberSyncToTargetPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberSyncToTargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberSyncToTargetPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTargetDeclinationGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTargetDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTargetDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTargetDeclinationPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTargetDeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? targetDeclination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTargetDeclinationPut(deviceNumber, targetDeclination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTargetRightAscensionGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTargetRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTargetRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTargetRightAscensionPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTargetRightAscensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? targetRightAscension = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTargetRightAscensionPut(deviceNumber, targetRightAscension, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTrackingGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTrackingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTrackingPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTrackingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool? tracking = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTrackingPut(deviceNumber, tracking, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTrackingRateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTrackingRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTrackingRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DriveRateResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTrackingRatePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTrackingRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            DriveRate? trackingRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTrackingRatePut(deviceNumber, trackingRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberTrackingRatesGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberTrackingRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberTrackingRatesGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DriveRatesResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberUTCDateGet
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberUTCDateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberUTCDateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DateTimeResponse>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberUTCDatePut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberUTCDatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            DateTime? uTCDate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberUTCDatePut(deviceNumber, uTCDate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test ApiV1TelescopeDeviceNumberUnParkPut
        /// </summary>
        [Fact]
        public void ApiV1TelescopeDeviceNumberUnParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ApiV1TelescopeDeviceNumberUnParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }
    }
}
