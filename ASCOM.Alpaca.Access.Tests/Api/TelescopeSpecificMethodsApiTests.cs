/*
 * ASCOM Alpaca Simulators
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using ASCOM.Alpaca.Access;
using ASCOM.Alpaca.Responses;
using ASCOM.Standard.Interfaces;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing TelescopeApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TelescopeApiTests : IDisposable
    {
        private Telescope instance;

        public TelescopeApiTests()
        {
            instance = new Telescope("http://localhost:5000/");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TelescopeApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TelescopeApi
            Assert.IsType<Telescope>(instance);
        }

        /// <summary>
        /// Test TelescopeAbortSlewPut
        /// </summary>
        [Fact]
        public void TelescopeAbortSlewPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAbortSlewPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeAlignmentModeGet
        /// </summary>
        [Fact]
        public void TelescopeAlignmentModeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAlignmentModeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<AlignmentModeResponse>(response);
        }

        /// <summary>
        /// Test TelescopeAltitudeGet
        /// </summary>
        [Fact]
        public void TelescopeAltitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAltitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeApertureAreaGet
        /// </summary>
        [Fact]
        public void TelescopeApertureAreaGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeApertureAreaGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeApertureDiameterGet
        /// </summary>
        [Fact]
        public void TelescopeApertureDiameterGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeApertureDiameterGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeAtHomeGet
        /// </summary>
        [Fact]
        public void TelescopeAtHomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAtHomeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeAtParkGet
        /// </summary>
        [Fact]
        public void TelescopeAtParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAtParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeAxisRatesGet
        /// </summary>
        [Fact]
        public void TelescopeAxisRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAxisRatesGet(deviceNumber, axis, clientID, clientTransactionID);
            Assert.IsType<AxisRatesResponse>(response);
        }

        /// <summary>
        /// Test TelescopeAzimuthGet
        /// </summary>
        [Fact]
        public void TelescopeAzimuthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeAzimuthGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanFindHomeGet
        /// </summary>
        [Fact]
        public void TelescopeCanFindHomeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanFindHomeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanMoveAxisGet
        /// </summary>
        [Fact]
        public void TelescopeCanMoveAxisGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanMoveAxisGet(deviceNumber, axis, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanParkGet
        /// </summary>
        [Fact]
        public void TelescopeCanParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanPulseGuideGet
        /// </summary>
        [Fact]
        public void TelescopeCanPulseGuideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanPulseGuideGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetDeclinationRateGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetDeclinationRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetDeclinationRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetGuideRatesGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetGuideRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetGuideRatesGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetParkGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetParkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetParkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetPierSideGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetPierSideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetPierSideGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetRightAscensionRateGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetRightAscensionRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetRightAscensionRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSetTrackingGet
        /// </summary>
        [Fact]
        public void TelescopeCanSetTrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSetTrackingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSlewAltAzAsyncGet
        /// </summary>
        [Fact]
        public void TelescopeCanSlewAltAzAsyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSlewAltAzAsyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSlewAltAzGet
        /// </summary>
        [Fact]
        public void TelescopeCanSlewAltAzGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSlewAltAzGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSlewAsyncGet
        /// </summary>
        [Fact]
        public void TelescopeCanSlewAsyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSlewAsyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSlewGet
        /// </summary>
        [Fact]
        public void TelescopeCanSlewGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSlewGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSyncAltAzGet
        /// </summary>
        [Fact]
        public void TelescopeCanSyncAltAzGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSyncAltAzGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanSyncGet
        /// </summary>
        [Fact]
        public void TelescopeCanSyncGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanSyncGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeCanUnparkGet
        /// </summary>
        [Fact]
        public void TelescopeCanUnparkGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeCanUnparkGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeclinationRateGet
        /// </summary>
        [Fact]
        public void TelescopeDeclinationRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDeclinationRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDeclinationRatePut
        /// </summary>
        [Fact]
        public void TelescopeDeclinationRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? declinationRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDeclinationRatePut(deviceNumber, declinationRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeDestinationSideOfPierGet
        /// </summary>
        [Fact]
        public void TelescopeDestinationSideOfPierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDestinationSideOfPierGet(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<PointingStateResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDisposePut
        /// </summary>
        [Fact]
        public void TelescopeDisposePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDisposePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeDoesRefractionGet
        /// </summary>
        [Fact]
        public void TelescopeDoesRefractionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDoesRefractionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeDoesRefractionPut
        /// </summary>
        [Fact]
        public void TelescopeDoesRefractionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool? doesRefraction = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeDoesRefractionPut(deviceNumber, doesRefraction, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeEquatorialSystemGet
        /// </summary>
        [Fact]
        public void TelescopeEquatorialSystemGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeEquatorialSystemGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<EquatorialCoordinateTypeResponse>(response);
        }

        /// <summary>
        /// Test TelescopeFindHomePut
        /// </summary>
        [Fact]
        public void TelescopeFindHomePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeFindHomePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeFocalLengthGet
        /// </summary>
        [Fact]
        public void TelescopeFocalLengthGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeFocalLengthGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeGuideRateDeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeGuideRateDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeGuideRateDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeGuideRateDeclinationPut
        /// </summary>
        [Fact]
        public void TelescopeGuideRateDeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? guideRateDeclination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeGuideRateDeclinationPut(deviceNumber, guideRateDeclination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeGuideRateRightAscensionGet
        /// </summary>
        [Fact]
        public void TelescopeGuideRateRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeGuideRateRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeGuideRateRightAscensionPut
        /// </summary>
        [Fact]
        public void TelescopeGuideRateRightAscensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? guideRateRightAscension = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeGuideRateRightAscensionPut(deviceNumber, guideRateRightAscension, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeIsPulseGuidingGet
        /// </summary>
        [Fact]
        public void TelescopeIsPulseGuidingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeIsPulseGuidingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeMoveAxisPut
        /// </summary>
        [Fact]
        public void TelescopeMoveAxisPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            TelescopeAxis? axis = null;
            double? rate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeMoveAxisPut(deviceNumber, axis, rate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeParkPut
        /// </summary>
        [Fact]
        public void TelescopeParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopePulseGuidePut
        /// </summary>
        [Fact]
        public void TelescopePulseGuidePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            GuideDirection direction = GuideDirection.North;
            int? duration = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopePulseGuidePut(deviceNumber, direction, duration, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeRightAscensionGet
        /// </summary>
        [Fact]
        public void TelescopeRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeRightAscensionRateGet
        /// </summary>
        [Fact]
        public void TelescopeRightAscensionRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeRightAscensionRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeRightAscensionRatePut
        /// </summary>
        [Fact]
        public void TelescopeRightAscensionRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscensionRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeRightAscensionRatePut(deviceNumber, rightAscensionRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSetParkPut
        /// </summary>
        [Fact]
        public void TelescopeSetParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSetParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSideOfPierGet
        /// </summary>
        [Fact]
        public void TelescopeSideOfPierGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSideOfPierGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<PointingStateResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSideOfPierPut
        /// </summary>
        [Fact]
        public void TelescopeSideOfPierPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            PointingState? sideOfPier = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSideOfPierPut(deviceNumber, sideOfPier, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSiderealTimeGet
        /// </summary>
        [Fact]
        public void TelescopeSiderealTimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiderealTimeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSiteElevationGet
        /// </summary>
        [Fact]
        public void TelescopeSiteElevationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteElevationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSiteElevationPut
        /// </summary>
        [Fact]
        public void TelescopeSiteElevationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteElevation = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteElevationPut(deviceNumber, siteElevation, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSiteLatitudeGet
        /// </summary>
        [Fact]
        public void TelescopeSiteLatitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteLatitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSiteLatitudePut
        /// </summary>
        [Fact]
        public void TelescopeSiteLatitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteLatitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteLatitudePut(deviceNumber, siteLatitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSiteLongitudeGet
        /// </summary>
        [Fact]
        public void TelescopeSiteLongitudeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteLongitudeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSiteLongitudePut
        /// </summary>
        [Fact]
        public void TelescopeSiteLongitudePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? siteLongitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSiteLongitudePut(deviceNumber, siteLongitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewSettleTimeGet
        /// </summary>
        [Fact]
        public void TelescopeSlewSettleTimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewSettleTimeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSlewSettleTimePut
        /// </summary>
        [Fact]
        public void TelescopeSlewSettleTimePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? slewSettleTime = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewSettleTimePut(deviceNumber, slewSettleTime, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToAltAzAsyncPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToAltAzAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToAltAzAsyncPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToAltAzPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToAltAzPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToAltAzPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToCoordinatesAsyncPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToCoordinatesAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToCoordinatesAsyncPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToCoordinatesPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToCoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToCoordinatesPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToTargetAsyncPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToTargetAsyncPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToTargetAsyncPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewToTargetPut
        /// </summary>
        [Fact]
        public void TelescopeSlewToTargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewToTargetPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSlewingGet
        /// </summary>
        [Fact]
        public void TelescopeSlewingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSlewingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeSyncToAltAzPut
        /// </summary>
        [Fact]
        public void TelescopeSyncToAltAzPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? azimuth = null;
            double? altitude = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSyncToAltAzPut(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSyncToCoordinatesPut
        /// </summary>
        [Fact]
        public void TelescopeSyncToCoordinatesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? rightAscension = null;
            double? declination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSyncToCoordinatesPut(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeSyncToTargetPut
        /// </summary>
        [Fact]
        public void TelescopeSyncToTargetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeSyncToTargetPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeTargetDeclinationGet
        /// </summary>
        [Fact]
        public void TelescopeTargetDeclinationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTargetDeclinationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeTargetDeclinationPut
        /// </summary>
        [Fact]
        public void TelescopeTargetDeclinationPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? targetDeclination = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTargetDeclinationPut(deviceNumber, targetDeclination, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeTargetRightAscensionGet
        /// </summary>
        [Fact]
        public void TelescopeTargetRightAscensionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTargetRightAscensionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test TelescopeTargetRightAscensionPut
        /// </summary>
        [Fact]
        public void TelescopeTargetRightAscensionPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            double? targetRightAscension = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTargetRightAscensionPut(deviceNumber, targetRightAscension, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeTrackingGet
        /// </summary>
        [Fact]
        public void TelescopeTrackingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTrackingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test TelescopeTrackingPut
        /// </summary>
        [Fact]
        public void TelescopeTrackingPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool? tracking = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTrackingPut(deviceNumber, tracking, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeTrackingRateGet
        /// </summary>
        [Fact]
        public void TelescopeTrackingRateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTrackingRateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DriveRateResponse>(response);
        }

        /// <summary>
        /// Test TelescopeTrackingRatePut
        /// </summary>
        [Fact]
        public void TelescopeTrackingRatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            DriveRate? trackingRate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTrackingRatePut(deviceNumber, trackingRate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeTrackingRatesGet
        /// </summary>
        [Fact]
        public void TelescopeTrackingRatesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeTrackingRatesGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DriveRatesResponse>(response);
        }

        /// <summary>
        /// Test TelescopeUTCDateGet
        /// </summary>
        [Fact]
        public void TelescopeUTCDateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeUTCDateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DateTimeResponse>(response);
        }

        /// <summary>
        /// Test TelescopeUTCDatePut
        /// </summary>
        [Fact]
        public void TelescopeUTCDatePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            DateTime? uTCDate = null;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeUTCDatePut(deviceNumber, uTCDate, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test TelescopeUnParkPut
        /// </summary>
        [Fact]
        public void TelescopeUnParkPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.TelescopeUnParkPut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }
    }
}
