/*
 * ASCOM Alpaca Device API
 *
 * The Alpaca API uses RESTful techniques and TCP/IP to enable ASCOM applications and devices to communicate across modern network environments.  ////// Interface Behaviour The ASCOM Interface behavioural requirements for Alpaca drivers are the same as for COM based drivers and are documented in the <a href=\"https://ascom-standards.org/Help/Developer/html/N_ASCOM_DeviceInterface.htm\">API Interface Definitions</a> e.g. the <a href=\"https://ascom-standards.org/Help/Developer/html/M_ASCOM_DeviceInterface_ITelescopeV3_SlewToCoordinates.htm\">Telescope.SlewToCoordinates</a> method.       This document focuses on how to use the ASCOM Interface standards in their RESTful Alpaca form. ////// Alpaca URLs, Case Sensitivity, Parameters and Returned values **Alpaca Device API URLs** are of the form **http(s)://host:port/path** where path comprises **\"/api/v1/\"** followed by one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89: * A telescope \"Interface Version\" method URL would be **http://192.168.1.89:7843/api/v1/telescope/0/InterfaceVersion**      * A first focuser \"Position\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/0/position**      * A second focuser \"StepSize\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/1/stepsize** * A rotator \"Halt\" method URL would be  **http://192.168.1.89:7843/api/v1/rotator/0/halt**   URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.  For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.  Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number,  the server's transaction number together with any error message and error number. If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.  ////// HTTP Status Codes and ASCOM Error codes The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.  Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute. A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.  An HTTP status code of `400` indicates that the device could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.  An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message. ////// SetupDialog and Alpaca Device Configuration The SetupDialog method has been omitted from the Alpaca Device API because it presents a user interface rather than returning data. Alpaca device configuration is covered in the \"ASCOM Alpaca Management API\" specification, which can be selected through the drop-down box at the head of this page.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using ASCOM.Alpaca.Responses;
using Org.OpenAPITools.Api;
using System;
using Xunit;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    /// Class for testing CameraSpecificMethodsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CameraSpecificMethodsApiTests : IDisposable
    {
        private CameraSpecificMethodsApi instance;

        public CameraSpecificMethodsApiTests()
        {
            instance = new CameraSpecificMethodsApi("http://localhost:5000/api/v1/");
        }

        public void Dispose()
        {
            //Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CameraSpecificMethodsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' CameraSpecificMethodsApi
            Assert.IsType<CameraSpecificMethodsApi>(instance);
        }

        /// <summary>
        /// Test CameraDeviceNumberAbortexposurePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberAbortexposurePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberAbortexposurePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBayeroffsetxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBayeroffsetxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBayeroffsetxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBayeroffsetyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBayeroffsetyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBayeroffsetyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBinxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBinxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBinxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBinxPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBinxPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int binX = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBinxPut(deviceNumber, binX, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBinyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBinyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBinyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberBinyPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberBinyPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int binY = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberBinyPut(deviceNumber, binY, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCamerastateGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCamerastateGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCamerastateGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCameraxsizeGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCameraxsizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCameraxsizeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCameraysizeGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCameraysizeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCameraysizeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCanabortexposureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCanabortexposureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCanabortexposureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCanasymmetricbinGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCanasymmetricbinGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCanasymmetricbinGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCanfastreadoutGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCanfastreadoutGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCanfastreadoutGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCangetcoolerpowerGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCangetcoolerpowerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCangetcoolerpowerGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCanpulseguideGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCanpulseguideGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCanpulseguideGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCansetccdtemperatureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCansetccdtemperatureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCansetccdtemperatureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCanstopexposureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCanstopexposureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCanstopexposureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCcdtemperatureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCcdtemperatureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCcdtemperatureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCooleronGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCooleronGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCooleronGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCooleronPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCooleronPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool coolerOn = true;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCooleronPut(deviceNumber, coolerOn, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberCoolerpowerGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberCoolerpowerGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberCoolerpowerGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberElectronsperaduGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberElectronsperaduGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberElectronsperaduGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberExposuremaxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberExposuremaxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberExposuremaxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberExposureminGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberExposureminGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberExposureminGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberExposureresolutionGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberExposureresolutionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberExposureresolutionGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberFastreadoutGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberFastreadoutGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberFastreadoutGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberFastreadoutPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberFastreadoutPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            bool fastReadout = true;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberFastreadoutPut(deviceNumber, fastReadout, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberFullwellcapacityGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberFullwellcapacityGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberFullwellcapacityGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberGainGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberGainGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberGainGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberGainPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberGainPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int gain = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberGainPut(deviceNumber, gain, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberGainmaxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberGainmaxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberGainmaxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberGainminGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberGainminGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberGainminGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberGainsGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberGainsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberGainsGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringListResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberHasshutterGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberHasshutterGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberHasshutterGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberHeatsinktemperatureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberHeatsinktemperatureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberHeatsinktemperatureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /*/// <summary>
        /// Test CameraDeviceNumberImagearrayGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberImagearrayGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberImagearrayGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<ImageArrayResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberImagearrayvariantGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberImagearrayvariantGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberImagearrayvariantGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<ImageArrayResponse>(response);
        }
        */
        /// <summary>
        /// Test CameraDeviceNumberImagereadyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberImagereadyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberImagereadyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberIspulseguidingGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberIspulseguidingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberIspulseguidingGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<BoolResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberLastexposuredurationGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberLastexposuredurationGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberLastexposuredurationGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberLastexposurestarttimeGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberLastexposurestarttimeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberLastexposurestarttimeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberMaxaduGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberMaxaduGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberMaxaduGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberMaxbinxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberMaxbinxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberMaxbinxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberMaxbinyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberMaxbinyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberMaxbinyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberNumxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberNumxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberNumxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberNumxPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberNumxPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int numX = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberNumxPut(deviceNumber, numX, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberNumyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberNumyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberNumyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberNumyPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberNumyPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int numY = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberNumyPut(deviceNumber, numY, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberOffsetGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberOffsetGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberOffsetGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberOffsetPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberOffsetPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int offset = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberOffsetPut(deviceNumber, offset, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberOffsetmaxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberOffsetmaxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberOffsetmaxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberOffsetminGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberOffsetminGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberOffsetminGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberOffsetsGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberOffsetsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberOffsetsGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringListResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberPercentcompletedGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberPercentcompletedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberPercentcompletedGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberPixelsizexGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberPixelsizexGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberPixelsizexGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberPixelsizeyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberPixelsizeyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberPixelsizeyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberPulseguidePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberPulseguidePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int direction = 0;
            int duration = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberPulseguidePut(deviceNumber, direction, duration, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberReadoutmodeGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberReadoutmodeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberReadoutmodeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberReadoutmodePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberReadoutmodePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int readoutMode = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberReadoutmodePut(deviceNumber, readoutMode, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberReadoutmodesGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberReadoutmodesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberReadoutmodesGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringListResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberSensornameGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberSensornameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberSensornameGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<StringResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberSensortypeGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberSensortypeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberSensortypeGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberSetccdtemperatureGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberSetccdtemperatureGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberSetccdtemperatureGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<DoubleResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberSetccdtemperaturePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberSetccdtemperaturePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            decimal setCCDTemperature = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberSetccdtemperaturePut(deviceNumber, setCCDTemperature, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStartexposurePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStartexposurePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            decimal duration = 1;
            bool light = true;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStartexposurePut(deviceNumber, duration, light, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStartxGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStartxGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStartxGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStartxPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStartxPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int startX = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStartxPut(deviceNumber, startX, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStartyGet
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStartyGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStartyGet(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<IntResponse>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStartyPut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStartyPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int startY = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStartyPut(deviceNumber, startY, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }

        /// <summary>
        /// Test CameraDeviceNumberStopexposurePut
        /// </summary>
        [Fact]
        public void CameraDeviceNumberStopexposurePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int deviceNumber = 0;
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.CameraDeviceNumberStopexposurePut(deviceNumber, clientID, clientTransactionID);
            Assert.IsType<Response>(response);
        }
    }
}