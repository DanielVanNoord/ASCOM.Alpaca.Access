/*
 * ASCOM Alpaca Management API
 *
 * This API enables Alpaca devices to be managed. ## Introduction The overall Alpaca device mangement interface provides two access mechanisms: **browser** through paths prefixed with **\"/setup\"** and **REST/JSON** through paths prefixed with **\"/management\"**.  The browser and JSON methods also come in two styles: **\"Versioned\"** and **\"Unversioned\"**.  Unversioned paths are intended to be \"well known\" and not to change in future, whereas versioned paths can change should this ever be required.  The number of unversioned paths has been limited to two: a top level browser URL for overall device configuration and a JSON list of the  interface versions supported by the Alpaca device. All other paths are versioned.  ## URLs and Case Sensitivity **Alpaca Management URLs** are all of the form **http(s)://host:port/path** where path is one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89: * The main browser setup URL would be **http://192.168.1.89:7843/setup**      * The JSON list of supported interface versions would be available through a GET to **http://192.168.1.89:7843/management/apiversions**      * The JSON list of configured ASCOM devices  would be available through a GET to **http://192.168.1.89:7843/management/v1/configureddevices**   URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.  ## Parameters and Returned values For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.  Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number,  the server's transaction number together with any error message and error number. If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.  ## HTTP Status Codes and ASCOM Error codes The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.  Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute. A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.  An HTTP status code of `400` indicates that the management JSON command interpreter could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.  In common with accepted Internet practice, an HTTP status code of `403` indicates that an invalid URL was sent to the /setup browser interface.  An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using ASCOM.Alpaca.Access;
using ASCOM.Alpaca.Responses;
// uncomment below to import models
//using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing ManagementInterfaceJSONApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ManagementInterfaceApiTests : IDisposable
    {
        private ManagementInterface instance;

        public ManagementInterfaceApiTests()
        {
            instance = new ManagementInterface("http://localhost:5000/");
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManagementInterfaceJSONApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ManagementInterfaceJSONApi
            Assert.IsType<ManagementInterface>(instance);
        }

        /// <summary>
        /// Test ManagementApiversionsGet
        /// </summary>
        [Fact]
        public void ManagementApiversionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ManagementApiversionsGet(clientID, clientTransactionID);
            Assert.IsType<IntListResponse>(response);
            Assert.True(response.Value.Count > 0);
            Assert.True(response.Value.Contains(1));
        }

        /// <summary>
        /// Test ManagementV1ConfigureddevicesGet
        /// </summary>
        [Fact]
        public void ManagementV1ConfigureddevicesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ManagementV1ConfiguredDevicesGet(clientID, clientTransactionID);
            Assert.IsType<AlpacaConfiguredDevicesResponse>(response);
            Assert.True(response.Value.Count > 0);
        }

        /// <summary>
        /// Test ManagementV1DescriptionGet
        /// </summary>
        [Fact]
        public void ManagementV1DescriptionGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            int? clientID = null;
            int? clientTransactionID = null;
            var response = instance.ManagementV1DescriptionGet(clientID, clientTransactionID);
            Assert.IsType<AlpacaDescriptionResponse>(response);
            Assert.True((response.Value.Manufacturer ?? string.Empty) != string.Empty);
            Assert.True((response.Value.Location ?? string.Empty) != string.Empty);
            Assert.True((response.Value.ManufacturerVersion ?? string.Empty) != string.Empty);
            Assert.True((response.Value.ServerName ?? string.Empty) != string.Empty);
        }
    }
}
