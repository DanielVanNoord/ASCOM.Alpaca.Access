/*
 * ASCOM Alpaca Device API
 *
 * The Alpaca API uses RESTful techniques and TCP/IP to enable ASCOM applications and devices to communicate across modern network environments.  ## Interface Behaviour The ASCOM Interface behavioural requirements for Alpaca drivers are the same as for COM based drivers and are documented in the <a href=\"https://ascom-standards.org/Help/Developer/html/N_ASCOM_DeviceInterface.htm\">API Interface Definitions</a> e.g. the <a href=\"https://ascom-standards.org/Help/Developer/html/M_ASCOM_DeviceInterface_ITelescopeV3_SlewToCoordinates.htm\">Telescope.SlewToCoordinates</a> method.       This document focuses on how to use the ASCOM Interface standards in their RESTful Alpaca form. ## Alpaca URLs, Case Sensitivity, Parameters and Returned values **Alpaca Device API URLs** are of the form **http(s)://host:port/path** where path comprises **\"/api/v1/\"** followed by one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89: * A telescope \"Interface Version\" method URL would be **http://192.168.1.89:7843/api/v1/telescope/0/interfaceversion**      * A first focuser \"Position\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/0/position**      * A second focuser \"StepSize\" method URL would be  **http://192.168.1.89:7843/api/v1/focuser/1/stepsize** * A rotator \"Halt\" method URL would be  **http://192.168.1.89:7843/api/v1/rotator/0/halt**   URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.  For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.  Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number,  the server's transaction number together with any error message and error number. If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.  ## HTTP Status Codes and ASCOM Error codes The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.  Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute. A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.  An HTTP status code of `400` indicates that the device could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.  An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message. ## SetupDialog and Alpaca Device Configuration The SetupDialog method has been omitted from the Alpaca Device API because it presents a user interface rather than returning data. Alpaca device configuration is covered in the \"ASCOM Alpaca Management API\" specification, which can be selected through the drop-down box at the head of this page. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASCOM.Alpaca.Access;
using ASCOM.Alpaca.Responses;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFocuserSpecificMethodsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Indicates whether the focuser is capable of absolute position.
        /// </summary>
        /// <remarks>
        /// True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse FocuserDeviceNumberAbsoluteGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position.
        /// </summary>
        /// <remarks>
        /// True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> FocuserDeviceNumberAbsoluteGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Immediatley stops focuser motion.
        /// </summary>
        /// <remarks>
        /// Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Response</returns>
        Response FocuserDeviceNumberHaltPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Immediatley stops focuser motion.
        /// </summary>
        /// <remarks>
        /// Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> FocuserDeviceNumberHaltPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Indicates whether the focuser is currently moving.
        /// </summary>
        /// <remarks>
        /// True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse FocuserDeviceNumberIsmovingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Indicates whether the focuser is currently moving.
        /// </summary>
        /// <remarks>
        /// True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> FocuserDeviceNumberIsmovingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Returns the focuser&#39;s maximum increment size.
        /// </summary>
        /// <remarks>
        /// Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        IntResponse FocuserDeviceNumberMaxincrementGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size.
        /// </summary>
        /// <remarks>
        /// Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        ApiResponse<IntResponse> FocuserDeviceNumberMaxincrementGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Returns the focuser&#39;s maximum step size.
        /// </summary>
        /// <remarks>
        /// Maximum step position permitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        IntResponse FocuserDeviceNumberMaxstepGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Returns the focuser&#39;s maximum step size.
        /// </summary>
        /// <remarks>
        /// Maximum step position permitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        ApiResponse<IntResponse> FocuserDeviceNumberMaxstepGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Moves the focuser to a new position.
        /// </summary>
        /// <remarks>
        /// Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>Response</returns>
        Response FocuserDeviceNumberMovePut(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Moves the focuser to a new position.
        /// </summary>
        /// <remarks>
        /// Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> FocuserDeviceNumberMovePutWithHttpInfo(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Returns the focuser&#39;s current position.
        /// </summary>
        /// <remarks>
        /// Current focuser position, in steps.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        IntResponse FocuserDeviceNumberPositionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Returns the focuser&#39;s current position.
        /// </summary>
        /// <remarks>
        /// Current focuser position, in steps.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        ApiResponse<IntResponse> FocuserDeviceNumberPositionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Returns the focuser&#39;s step size.
        /// </summary>
        /// <remarks>
        /// Step size (microns) for the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse FocuserDeviceNumberStepsizeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Returns the focuser&#39;s step size.
        /// </summary>
        /// <remarks>
        /// Step size (microns) for the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> FocuserDeviceNumberStepsizeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Retrieves the state of temperature compensation mode
        /// </summary>
        /// <remarks>
        /// Gets the state of temperature compensation mode (if available), else always False.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse FocuserDeviceNumberTempcompGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Retrieves the state of temperature compensation mode
        /// </summary>
        /// <remarks>
        /// Gets the state of temperature compensation mode (if available), else always False.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> FocuserDeviceNumberTempcompGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Sets the device&#39;s temperature compensation mode.
        /// </summary>
        /// <remarks>
        /// Sets the state of temperature compensation mode.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>Response</returns>
        Response FocuserDeviceNumberTempcompPut(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?));

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode.
        /// </summary>
        /// <remarks>
        /// Sets the state of temperature compensation mode.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> FocuserDeviceNumberTempcompPutWithHttpInfo(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?));
        /// <summary>
        /// Indicates whether the focuser has temperature compensation.
        /// </summary>
        /// <remarks>
        /// True if focuser has temperature compensation available.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse FocuserDeviceNumberTempcompavailableGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Indicates whether the focuser has temperature compensation.
        /// </summary>
        /// <remarks>
        /// True if focuser has temperature compensation available.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> FocuserDeviceNumberTempcompavailableGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Returns the focuser&#39;s current temperature.
        /// </summary>
        /// <remarks>
        /// Current ambient temperature as measured by the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse FocuserDeviceNumberTemperatureGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Returns the focuser&#39;s current temperature.
        /// </summary>
        /// <remarks>
        /// Current ambient temperature as measured by the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> FocuserDeviceNumberTemperatureGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFocuserSpecificMethodsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Indicates whether the focuser is capable of absolute position.
        /// </summary>
        /// <remarks>
        /// True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberAbsoluteGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position.
        /// </summary>
        /// <remarks>
        /// True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> FocuserDeviceNumberAbsoluteGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Immediatley stops focuser motion.
        /// </summary>
        /// <remarks>
        /// Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> FocuserDeviceNumberHaltPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Immediatley stops focuser motion.
        /// </summary>
        /// <remarks>
        /// Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> FocuserDeviceNumberHaltPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Indicates whether the focuser is currently moving.
        /// </summary>
        /// <remarks>
        /// True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberIsmovingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Indicates whether the focuser is currently moving.
        /// </summary>
        /// <remarks>
        /// True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> FocuserDeviceNumberIsmovingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the focuser&#39;s maximum increment size.
        /// </summary>
        /// <remarks>
        /// Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberMaxincrementGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size.
        /// </summary>
        /// <remarks>
        /// Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntResponse>> FocuserDeviceNumberMaxincrementGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the focuser&#39;s maximum step size.
        /// </summary>
        /// <remarks>
        /// Maximum step position permitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberMaxstepGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the focuser&#39;s maximum step size.
        /// </summary>
        /// <remarks>
        /// Maximum step position permitted.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntResponse>> FocuserDeviceNumberMaxstepGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Moves the focuser to a new position.
        /// </summary>
        /// <remarks>
        /// Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> FocuserDeviceNumberMovePutAsync(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Moves the focuser to a new position.
        /// </summary>
        /// <remarks>
        /// Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> FocuserDeviceNumberMovePutWithHttpInfoAsync(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the focuser&#39;s current position.
        /// </summary>
        /// <remarks>
        /// Current focuser position, in steps.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberPositionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the focuser&#39;s current position.
        /// </summary>
        /// <remarks>
        /// Current focuser position, in steps.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntResponse>> FocuserDeviceNumberPositionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the focuser&#39;s step size.
        /// </summary>
        /// <remarks>
        /// Step size (microns) for the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> FocuserDeviceNumberStepsizeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the focuser&#39;s step size.
        /// </summary>
        /// <remarks>
        /// Step size (microns) for the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> FocuserDeviceNumberStepsizeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves the state of temperature compensation mode
        /// </summary>
        /// <remarks>
        /// Gets the state of temperature compensation mode (if available), else always False.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberTempcompGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves the state of temperature compensation mode
        /// </summary>
        /// <remarks>
        /// Gets the state of temperature compensation mode (if available), else always False.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> FocuserDeviceNumberTempcompGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sets the device&#39;s temperature compensation mode.
        /// </summary>
        /// <remarks>
        /// Sets the state of temperature compensation mode.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> FocuserDeviceNumberTempcompPutAsync(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode.
        /// </summary>
        /// <remarks>
        /// Sets the state of temperature compensation mode.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> FocuserDeviceNumberTempcompPutWithHttpInfoAsync(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Indicates whether the focuser has temperature compensation.
        /// </summary>
        /// <remarks>
        /// True if focuser has temperature compensation available.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberTempcompavailableGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Indicates whether the focuser has temperature compensation.
        /// </summary>
        /// <remarks>
        /// True if focuser has temperature compensation available.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> FocuserDeviceNumberTempcompavailableGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the focuser&#39;s current temperature.
        /// </summary>
        /// <remarks>
        /// Current ambient temperature as measured by the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> FocuserDeviceNumberTemperatureGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the focuser&#39;s current temperature.
        /// </summary>
        /// <remarks>
        /// Current ambient temperature as measured by the focuser.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> FocuserDeviceNumberTemperatureGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFocuserSpecificMethodsApi : IFocuserSpecificMethodsApiSync, IFocuserSpecificMethodsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FocuserSpecificMethodsApi : AlpacaBase, IAlpacaBase, IFocuserSpecificMethodsApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FocuserSpecificMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FocuserSpecificMethodsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FocuserSpecificMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FocuserSpecificMethodsApi(String basePath) : base("focuser", basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FocuserSpecificMethodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FocuserSpecificMethodsApi(Org.OpenAPITools.Client.Configuration configuration) : base("focuser", configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FocuserSpecificMethodsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FocuserSpecificMethodsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration) : base("focuser", client, asyncClient, configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position. True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse FocuserDeviceNumberAbsoluteGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = FocuserDeviceNumberAbsoluteGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position. True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> FocuserDeviceNumberAbsoluteGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/focuser/{device_number}/absolute", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberAbsoluteGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position. True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberAbsoluteGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await FocuserDeviceNumberAbsoluteGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser is capable of absolute position. True if the focuser is capable of absolute position; that is, being commanded to a specific step location.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> FocuserDeviceNumberAbsoluteGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/focuser/{device_number}/absolute", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberAbsoluteGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Immediatley stops focuser motion. Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>Response</returns>
        public Response FocuserDeviceNumberHaltPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = FocuserDeviceNumberHaltPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immediatley stops focuser motion. Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> FocuserDeviceNumberHaltPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/focuser/{device_number}/halt", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberHaltPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Immediatley stops focuser motion. Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> FocuserDeviceNumberHaltPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await FocuserDeviceNumberHaltPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Immediatley stops focuser motion. Immediately stop any focuser motion due to a previous Move(Int32) method call.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="UNKNOWN_BASE_TYPE"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> FocuserDeviceNumberHaltPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/focuser/{device_number}/halt", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberHaltPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indicates whether the focuser is currently moving. True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse FocuserDeviceNumberIsmovingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = FocuserDeviceNumberIsmovingGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser is currently moving. True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> FocuserDeviceNumberIsmovingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/focuser/{device_number}/ismoving", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberIsmovingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indicates whether the focuser is currently moving. True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberIsmovingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await FocuserDeviceNumberIsmovingGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser is currently moving. True if the focuser is currently moving to a new position. False if the focuser is stationary.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> FocuserDeviceNumberIsmovingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/focuser/{device_number}/ismoving", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberIsmovingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size. Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        public IntResponse FocuserDeviceNumberMaxincrementGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = FocuserDeviceNumberMaxincrementGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size. Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IntResponse> FocuserDeviceNumberMaxincrementGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IntResponse>("/focuser/{device_number}/maxincrement", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMaxincrementGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size. Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        public async System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberMaxincrementGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = await FocuserDeviceNumberMaxincrementGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum increment size. Maximum increment size allowed by the focuser; i.e. the maximum number of steps allowed in one move operation.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IntResponse>> FocuserDeviceNumberMaxincrementGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IntResponse>("/focuser/{device_number}/maxincrement", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMaxincrementGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum step size. Maximum step position permitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        public IntResponse FocuserDeviceNumberMaxstepGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = FocuserDeviceNumberMaxstepGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum step size. Maximum step position permitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IntResponse> FocuserDeviceNumberMaxstepGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IntResponse>("/focuser/{device_number}/maxstep", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMaxstepGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum step size. Maximum step position permitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        public async System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberMaxstepGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = await FocuserDeviceNumberMaxstepGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s maximum step size. Maximum step position permitted.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IntResponse>> FocuserDeviceNumberMaxstepGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IntResponse>("/focuser/{device_number}/maxstep", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMaxstepGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moves the focuser to a new position. Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>Response</returns>
        public Response FocuserDeviceNumberMovePut(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = FocuserDeviceNumberMovePutWithHttpInfo(deviceNumber, position, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moves the focuser to a new position. Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> FocuserDeviceNumberMovePutWithHttpInfo(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            localVarRequestOptions.FormParameters.Add("Position", Org.OpenAPITools.Client.ClientUtils.ParameterToString(position)); // form parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/focuser/{device_number}/move", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMovePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Moves the focuser to a new position. Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> FocuserDeviceNumberMovePutAsync(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await FocuserDeviceNumberMovePutWithHttpInfoAsync(deviceNumber, position, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Moves the focuser to a new position. Moves the focuser by the specified amount or to the specified position depending on the value of the Absolute property.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="position">Step distance or absolute position, depending on the value of the Absolute property</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> FocuserDeviceNumberMovePutWithHttpInfoAsync(int deviceNumber, int position, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            localVarRequestOptions.FormParameters.Add("Position", Org.OpenAPITools.Client.ClientUtils.ParameterToString(position)); // form parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/focuser/{device_number}/move", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberMovePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s current position. Current focuser position, in steps.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>IntResponse</returns>
        public IntResponse FocuserDeviceNumberPositionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = FocuserDeviceNumberPositionGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s current position. Current focuser position, in steps.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IntResponse> FocuserDeviceNumberPositionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IntResponse>("/focuser/{device_number}/position", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberPositionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s current position. Current focuser position, in steps.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        public async System.Threading.Tasks.Task<IntResponse> FocuserDeviceNumberPositionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = await FocuserDeviceNumberPositionGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s current position. Current focuser position, in steps.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IntResponse>> FocuserDeviceNumberPositionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IntResponse>("/focuser/{device_number}/position", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberPositionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s step size. Step size (microns) for the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse FocuserDeviceNumberStepsizeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = FocuserDeviceNumberStepsizeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s step size. Step size (microns) for the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> FocuserDeviceNumberStepsizeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/focuser/{device_number}/stepsize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberStepsizeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s step size. Step size (microns) for the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> FocuserDeviceNumberStepsizeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await FocuserDeviceNumberStepsizeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s step size. Step size (microns) for the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> FocuserDeviceNumberStepsizeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/focuser/{device_number}/stepsize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberStepsizeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the state of temperature compensation mode Gets the state of temperature compensation mode (if available), else always False.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse FocuserDeviceNumberTempcompGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = FocuserDeviceNumberTempcompGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the state of temperature compensation mode Gets the state of temperature compensation mode (if available), else always False.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> FocuserDeviceNumberTempcompGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/focuser/{device_number}/tempcomp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves the state of temperature compensation mode Gets the state of temperature compensation mode (if available), else always False.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberTempcompGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await FocuserDeviceNumberTempcompGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves the state of temperature compensation mode Gets the state of temperature compensation mode (if available), else always False.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> FocuserDeviceNumberTempcompGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/focuser/{device_number}/tempcomp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode. Sets the state of temperature compensation mode.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>Response</returns>
        public Response FocuserDeviceNumberTempcompPut(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = FocuserDeviceNumberTempcompPutWithHttpInfo(deviceNumber, tempComp, _client, clientTransactionIDForm);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode. Sets the state of temperature compensation mode.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> FocuserDeviceNumberTempcompPutWithHttpInfo(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            localVarRequestOptions.FormParameters.Add("TempComp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tempComp)); // form parameter
            if (_client != null)
            {
                localVarRequestOptions.FormParameters.Add("Client", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_client)); // form parameter
            }
            if (clientTransactionIDForm != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionIDForm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionIDForm)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/focuser/{device_number}/tempcomp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode. Sets the state of temperature compensation mode.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> FocuserDeviceNumberTempcompPutAsync(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await FocuserDeviceNumberTempcompPutWithHttpInfoAsync(deviceNumber, tempComp, _client, clientTransactionIDForm, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the device&#39;s temperature compensation mode. Sets the state of temperature compensation mode.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server</param>
        /// <param name="tempComp">Set true to enable the focuser&#39;s temperature compensation mode, otherwise false for normal operation.</param>
        /// <param name="_client">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional)</param>
        /// <param name="clientTransactionIDForm">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> FocuserDeviceNumberTempcompPutWithHttpInfoAsync(int deviceNumber, bool tempComp, int? _client = default(int?), int? clientTransactionIDForm = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            localVarRequestOptions.FormParameters.Add("TempComp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tempComp)); // form parameter
            if (_client != null)
            {
                localVarRequestOptions.FormParameters.Add("Client", Org.OpenAPITools.Client.ClientUtils.ParameterToString(_client)); // form parameter
            }
            if (clientTransactionIDForm != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionIDForm", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionIDForm)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/focuser/{device_number}/tempcomp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indicates whether the focuser has temperature compensation. True if focuser has temperature compensation available.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse FocuserDeviceNumberTempcompavailableGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = FocuserDeviceNumberTempcompavailableGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser has temperature compensation. True if focuser has temperature compensation available.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> FocuserDeviceNumberTempcompavailableGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/focuser/{device_number}/tempcompavailable", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompavailableGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indicates whether the focuser has temperature compensation. True if focuser has temperature compensation available.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> FocuserDeviceNumberTempcompavailableGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await FocuserDeviceNumberTempcompavailableGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indicates whether the focuser has temperature compensation. True if focuser has temperature compensation available.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> FocuserDeviceNumberTempcompavailableGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/focuser/{device_number}/tempcompavailable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTempcompavailableGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s current temperature. Current ambient temperature as measured by the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse FocuserDeviceNumberTemperatureGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = FocuserDeviceNumberTemperatureGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s current temperature. Current ambient temperature as measured by the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> FocuserDeviceNumberTemperatureGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/focuser/{device_number}/temperature", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTemperatureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the focuser&#39;s current temperature. Current ambient temperature as measured by the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> FocuserDeviceNumberTemperatureGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await FocuserDeviceNumberTemperatureGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the focuser&#39;s current temperature. Current ambient temperature as measured by the focuser.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber">Zero based device number as set on the server (0 to 4294967295)</param>
        /// <param name="clientID">Client&#39;s unique ID. (0 to 4294967295). The client should choose a value at start-up, e.g. a random value between 0 and 65535, and send this value on every transaction to help associate entries in device logs with this particular client. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (0 to 4294967295). The client should start this count at 1 and increment by one on each successive transaction. This will aid associating entries in device logs with corresponding entries in client side logs. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> FocuserDeviceNumberTemperatureGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("device_number", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/focuser/{device_number}/temperature", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FocuserDeviceNumberTemperatureGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
