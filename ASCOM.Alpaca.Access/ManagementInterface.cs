/*
 * ASCOM Alpaca Management API
 *
 * This API enables Alpaca devices to be managed. ## Introduction The overall Alpaca device mangement interface provides two access mechanisms: **browser** through paths prefixed with **\"/setup\"** and **REST/JSON** through paths prefixed with **\"/management\"**.  The browser and JSON methods also come in two styles: **\"Versioned\"** and **\"Unversioned\"**.  Unversioned paths are intended to be \"well known\" and not to change in future, whereas versioned paths can change should this ever be required.  The number of unversioned paths has been limited to two: a top level browser URL for overall device configuration and a JSON list of the  interface versions supported by the Alpaca device. All other paths are versioned.  ## URLs and Case Sensitivity **Alpaca Management URLs** are all of the form **http(s)://host:port/path** where path is one of the method names below. e.g. for an Alpaca interface running on port 7843 of a device with IP address 192.168.1.89: * The main browser setup URL would be **http://192.168.1.89:7843/setup**      * The JSON list of supported interface versions would be available through a GET to **http://192.168.1.89:7843/management/apiversions**      * The JSON list of configured ASCOM devices  would be available through a GET to **http://192.168.1.89:7843/management/v1/configureddevices**   URLs are case sensitive and all elements must be in lower case. This means that both the device type and command name must always be in lower case. Parameter names are not case sensitive, so clients and drivers should be prepared for parameter names to be supplied and returned with any casing. Parameter values can be in mixed case as required.  ## Parameters and Returned values For GET operations, parameters should be placed in the URL query string and for PUT operations they should be placed in the body of the message.  Responses, as described below, are returned in JSON format and always include a common set of values including the client's transaction number,  the server's transaction number together with any error message and error number. If the transaction completes successfully, the ErrorMessage field will be an empty string and the ErrorNumber field will be zero.  ## HTTP Status Codes and ASCOM Error codes The returned HTTP status code gives a high level view of whether the device understood the request and whether it attempted to process it.  Under most circumstances the returned status will be `200`, indicating that the request was correctly formatted and that it was passed to the device's handler to execute. A `200` status does not necessarily mean that the operation completed as expected, without error, and you must always check the ErrorMessage and ErrorNumber fields to confirm whether the returned result is valid. The `200` status simply means that the transaction was successfully managed by the device's transaction management layer.  An HTTP status code of `400` indicates that the management JSON command interpreter could not interpret the request e.g. an invalid device number or misspelt device type was supplied. Check the body of the response for a text error message.  In common with accepted Internet practice, an HTTP status code of `403` indicates that an invalid URL was sent to the /setup browser interface.  An HTTP status code of `500` indicates an unexpected error within the device from which it could not recover. Check the body of the response for a text error message. 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ASCOM.Alpaca.Responses;
using Org.OpenAPITools.Client;

namespace ASCOM.Alpaca.Access
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementInterfaceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Supported Alpaca API versions
        /// </summary>
        /// <remarks>
        /// Returns an integer array of supported Alpaca API version numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>IntListResponse</returns>
        IntListResponse ManagementApiversionsGet(int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Supported Alpaca API versions
        /// </summary>
        /// <remarks>
        /// Returns an integer array of supported Alpaca API version numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntListResponse</returns>
        ApiResponse<IntListResponse> ManagementApiversionsGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Summary information about each available ASCOM device
        /// </summary>
        /// <remarks>
        /// Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>AlpacaConfiguredDevicesResponse</returns>
        AlpacaConfiguredDevicesResponse ManagementV1ConfiguredDevicesGet(int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Summary information about each available ASCOM device
        /// </summary>
        /// <remarks>
        /// Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of AlpacaConfiguredDevicesResponse</returns>
        ApiResponse<AlpacaConfiguredDevicesResponse> ManagementV1ConfiguredDevicesGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// Summary information about this device as a whole
        /// </summary>
        /// <remarks>
        /// Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>AlpacaDescriptionResponse</returns>
        AlpacaDescriptionResponse ManagementV1DescriptionGet(int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// Summary information about this device as a whole
        /// </summary>
        /// <remarks>
        /// Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of AlpacaDescriptionResponse</returns>
        ApiResponse<AlpacaDescriptionResponse> ManagementV1DescriptionGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementInterfaceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Supported Alpaca API versions
        /// </summary>
        /// <remarks>
        /// Returns an integer array of supported Alpaca API version numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntListResponse</returns>
        System.Threading.Tasks.Task<IntListResponse> ManagementApiVersionsGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Supported Alpaca API versions
        /// </summary>
        /// <remarks>
        /// Returns an integer array of supported Alpaca API version numbers.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntListResponse>> ManagementApiVersionsGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summary information about each available ASCOM device
        /// </summary>
        /// <remarks>
        /// Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlpacaConfiguredDevicesResponse</returns>
        System.Threading.Tasks.Task<AlpacaConfiguredDevicesResponse> ManagementV1ConfiguredDevicesGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summary information about each available ASCOM device
        /// </summary>
        /// <remarks>
        /// Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlpacaConfiguredDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlpacaConfiguredDevicesResponse>> ManagementV1ConfigureddevicesGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summary information about this device as a whole
        /// </summary>
        /// <remarks>
        /// Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlpacaDescriptionResponse</returns>
        System.Threading.Tasks.Task<AlpacaDescriptionResponse> ManagementV1DescriptionGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summary information about this device as a whole
        /// </summary>
        /// <remarks>
        /// Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlpacaDescriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlpacaDescriptionResponse>> ManagementV1DescriptionGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IManagementInterfaceApi : IManagementInterfaceApiSync, IManagementInterfaceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ManagementInterface : IManagementInterfaceApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementInterface"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementInterface() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementInterface"/> class.
        /// </summary>
        /// <returns></returns>
        public ManagementInterface(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementInterface"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ManagementInterface(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ManagementInterface"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ManagementInterface(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Supported Alpaca API versions Returns an integer array of supported Alpaca API version numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>IntListResponse</returns>
        public IntListResponse ManagementApiversionsGet(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<IntListResponse> localVarResponse = ManagementApiversionsGetWithHttpInfo(clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Supported Alpaca API versions Returns an integer array of supported Alpaca API version numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of IntListResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IntListResponse> ManagementApiversionsGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IntListResponse>("/management/apiversions", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementApiversionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Supported Alpaca API versions Returns an integer array of supported Alpaca API version numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntListResponse</returns>
        public async System.Threading.Tasks.Task<IntListResponse> ManagementApiVersionsGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IntListResponse> localVarResponse = await ManagementApiVersionsGetWithHttpInfoAsync(clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Supported Alpaca API versions Returns an integer array of supported Alpaca API version numbers.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntListResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IntListResponse>> ManagementApiVersionsGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IntListResponse>("/management/apiversions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementApiversionsGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary information about each available ASCOM device Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>AlpacaConfiguredDevicesResponse</returns>
        public AlpacaConfiguredDevicesResponse ManagementV1ConfiguredDevicesGet(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<AlpacaConfiguredDevicesResponse> localVarResponse = ManagementV1ConfiguredDevicesGetWithHttpInfo(clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary information about each available ASCOM device Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of AlpacaConfiguredDevicesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AlpacaConfiguredDevicesResponse> ManagementV1ConfiguredDevicesGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlpacaConfiguredDevicesResponse>("/management/v1/configureddevices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementV1ConfigureddevicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary information about each available ASCOM device Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlpacaConfiguredDevicesResponse</returns>
        public async System.Threading.Tasks.Task<AlpacaConfiguredDevicesResponse> ManagementV1ConfiguredDevicesGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AlpacaConfiguredDevicesResponse> localVarResponse = await ManagementV1ConfigureddevicesGetWithHttpInfoAsync(clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary information about each available ASCOM device Returns an array of device description objects, providing unique information for each served device, enabling them to be accessed through the Alpaca Device API. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlpacaConfiguredDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AlpacaConfiguredDevicesResponse>> ManagementV1ConfigureddevicesGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/html"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlpacaConfiguredDevicesResponse>("/management/v1/configureddevices", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementV1ConfigureddevicesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary information about this device as a whole Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>AlpacaDescriptionResponse</returns>
        public AlpacaDescriptionResponse ManagementV1DescriptionGet(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<AlpacaDescriptionResponse> localVarResponse = ManagementV1DescriptionGetWithHttpInfo(clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary information about this device as a whole Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <returns>ApiResponse of AlpacaDescriptionResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AlpacaDescriptionResponse> ManagementV1DescriptionGetWithHttpInfo(int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlpacaDescriptionResponse>("/management/v1/description", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementV1DescriptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summary information about this device as a whole Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlpacaDescriptionResponse</returns>
        public async System.Threading.Tasks.Task<AlpacaDescriptionResponse> ManagementV1DescriptionGetAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AlpacaDescriptionResponse> localVarResponse = await ManagementV1DescriptionGetWithHttpInfoAsync(clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summary information about this device as a whole Returns cross-cutting information that applies to all devices available at this URL:Port. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientID">Client&#39;s unique ID. (optional, default to 1)</param>
        /// <param name="clientTransactionID">Client&#39;s transaction ID. (optional, default to 1234)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlpacaDescriptionResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AlpacaDescriptionResponse>> ManagementV1DescriptionGetWithHttpInfoAsync(int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json",
                "text/html"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlpacaDescriptionResponse>("/management/v1/description", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ManagementV1DescriptionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
