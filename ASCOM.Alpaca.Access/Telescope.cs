/*
 * ASCOM Alpaca Simulators
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using ASCOM.Alpaca.Responses;
using ASCOM.Standard.Interfaces;

namespace ASCOM.Alpaca.Access
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelescopeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberAbortSlewPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>AlignmentModeResponse</returns>
        AlignmentModeResponse ApiV1TelescopeDeviceNumberAlignmentModeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AlignmentModeResponse</returns>
        ApiResponse<AlignmentModeResponse> ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberAltitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberApertureAreaGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberApertureDiameterGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberAtHomeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberAtParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>AxisRatesResponse</returns>
        AxisRatesResponse ApiV1TelescopeDeviceNumberAxisRatesGet(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AxisRatesResponse</returns>
        ApiResponse<AxisRatesResponse> ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberAzimuthGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanFindHomeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanMoveAxisGet(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanPulseGuideGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetGuideRatesGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetPierSideGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSetTrackingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSlewAltAzGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSlewAsyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSlewGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSyncAltAzGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanSyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberCanUnparkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberDeclinationRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberDeclinationRatePut(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfo(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>PointingStateResponse</returns>
        PointingStateResponse ApiV1TelescopeDeviceNumberDestinationSideOfPierGet(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PointingStateResponse</returns>
        ApiResponse<PointingStateResponse> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberDisposePut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberDisposePutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberDoesRefractionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberDoesRefractionPut(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfo(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>EquatorialCoordinateTypeResponse</returns>
        EquatorialCoordinateTypeResponse ApiV1TelescopeDeviceNumberEquatorialSystemGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of EquatorialCoordinateTypeResponse</returns>
        ApiResponse<EquatorialCoordinateTypeResponse> ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberFindHomePut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberFocalLengthGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberGuideRateDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberGuideRateDeclinationPut(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfo(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfo(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberIsPulseGuidingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberMoveAxisPut(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberPulseGuidePut(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfo(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberRightAscensionRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberRightAscensionRatePut(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfo(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSetParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>PointingStateResponse</returns>
        PointingStateResponse ApiV1TelescopeDeviceNumberSideOfPierGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PointingStateResponse</returns>
        ApiResponse<PointingStateResponse> ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSideOfPierPut(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfo(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberSiderealTimeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberSiteElevationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSiteElevationPut(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfo(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberSiteLatitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSiteLatitudePut(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfo(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberSiteLongitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSiteLongitudePut(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfo(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>IntResponse</returns>
        IntResponse ApiV1TelescopeDeviceNumberSlewSettleTimeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        ApiResponse<IntResponse> ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewSettleTimePut(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfo(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToAltAzPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToCoordinatesPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSlewToTargetPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberSlewingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSyncToAltAzPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSyncToCoordinatesPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberSyncToTargetPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberTargetDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberTargetDeclinationPut(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfo(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        DoubleResponse ApiV1TelescopeDeviceNumberTargetRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberTargetRightAscensionPut(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfo(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        BoolResponse ApiV1TelescopeDeviceNumberTrackingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberTrackingPut(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfo(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DriveRateResponse</returns>
        DriveRateResponse ApiV1TelescopeDeviceNumberTrackingRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DriveRateResponse</returns>
        ApiResponse<DriveRateResponse> ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberTrackingRatePut(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfo(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DriveRatesResponse</returns>
        DriveRatesResponse ApiV1TelescopeDeviceNumberTrackingRatesGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DriveRatesResponse</returns>
        ApiResponse<DriveRatesResponse> ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DateTimeResponse</returns>
        DateTimeResponse ApiV1TelescopeDeviceNumberUTCDateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DateTimeResponse</returns>
        ApiResponse<DateTimeResponse> ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberUTCDatePut(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfo(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        Response ApiV1TelescopeDeviceNumberUnParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelescopeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberAbortSlewPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlignmentModeResponse</returns>
        System.Threading.Tasks.Task<AlignmentModeResponse> ApiV1TelescopeDeviceNumberAlignmentModeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlignmentModeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlignmentModeResponse>> ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberAltitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberApertureAreaGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberApertureDiameterGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberAtHomeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberAtParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AxisRatesResponse</returns>
        System.Threading.Tasks.Task<AxisRatesResponse> ApiV1TelescopeDeviceNumberAxisRatesGetAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AxisRatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AxisRatesResponse>> ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberAzimuthGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanFindHomeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanMoveAxisGetAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanPulseGuideGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetPierSideGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetTrackingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAsyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncAltAzGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanUnparkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDeclinationRatePutAsync(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfoAsync(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PointingStateResponse</returns>
        System.Threading.Tasks.Task<PointingStateResponse> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PointingStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PointingStateResponse>> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDisposePutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberDisposePutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberDoesRefractionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDoesRefractionPutAsync(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfoAsync(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EquatorialCoordinateTypeResponse</returns>
        System.Threading.Tasks.Task<EquatorialCoordinateTypeResponse> ApiV1TelescopeDeviceNumberEquatorialSystemGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EquatorialCoordinateTypeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EquatorialCoordinateTypeResponse>> ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberFindHomePutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberFocalLengthGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutAsync(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfoAsync(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutAsync(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfoAsync(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberIsPulseGuidingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberMoveAxisPutAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberPulseGuidePutAsync(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfoAsync(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberRightAscensionRatePutAsync(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfoAsync(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSetParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PointingStateResponse</returns>
        System.Threading.Tasks.Task<PointingStateResponse> ApiV1TelescopeDeviceNumberSideOfPierGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PointingStateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PointingStateResponse>> ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSideOfPierPutAsync(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfoAsync(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiderealTimeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteElevationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteElevationPutAsync(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfoAsync(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLatitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteLatitudePutAsync(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfoAsync(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLongitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteLongitudePutAsync(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfoAsync(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        System.Threading.Tasks.Task<IntResponse> ApiV1TelescopeDeviceNumberSlewSettleTimeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IntResponse>> ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewSettleTimePutAsync(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfoAsync(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToAltAzPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToTargetPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberSlewingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToAltAzPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToTargetPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberTargetDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTargetDeclinationPutAsync(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfoAsync(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberTargetRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTargetRightAscensionPutAsync(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfoAsync(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberTrackingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTrackingPutAsync(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfoAsync(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DriveRateResponse</returns>
        System.Threading.Tasks.Task<DriveRateResponse> ApiV1TelescopeDeviceNumberTrackingRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DriveRateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DriveRateResponse>> ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTrackingRatePutAsync(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfoAsync(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DriveRatesResponse</returns>
        System.Threading.Tasks.Task<DriveRatesResponse> ApiV1TelescopeDeviceNumberTrackingRatesGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DriveRatesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DriveRatesResponse>> ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTimeResponse</returns>
        System.Threading.Tasks.Task<DateTimeResponse> ApiV1TelescopeDeviceNumberUTCDateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTimeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DateTimeResponse>> ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberUTCDatePutAsync(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfoAsync(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberUnParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITelescopeApi : ITelescopeApiSync, ITelescopeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Telescope : AlpacaBase, ITelescopeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Telescope"/> class.
        /// </summary>
        /// <returns></returns>
        public Telescope() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Telescope"/> class.
        /// </summary>
        /// <returns></returns>
        public Telescope(String basePath) : base("telescope", basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Telescope"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Telescope(Org.OpenAPITools.Client.Configuration configuration) : base("telescope", configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Telescope"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public Telescope(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration) : base("telescope", client, asyncClient, configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberAbortSlewPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/AbortSlew", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAbortSlewPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberAbortSlewPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberAbortSlewPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/AbortSlew", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAbortSlewPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>AlignmentModeResponse</returns>
        public AlignmentModeResponse ApiV1TelescopeDeviceNumberAlignmentModeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<AlignmentModeResponse> localVarResponse = ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AlignmentModeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AlignmentModeResponse> ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AlignmentModeResponse>("/api/v1/telescope/{DeviceNumber}/AlignmentMode", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAlignmentModeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AlignmentModeResponse</returns>
        public async System.Threading.Tasks.Task<AlignmentModeResponse> ApiV1TelescopeDeviceNumberAlignmentModeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AlignmentModeResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AlignmentModeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AlignmentModeResponse>> ApiV1TelescopeDeviceNumberAlignmentModeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AlignmentModeResponse>("/api/v1/telescope/{DeviceNumber}/AlignmentMode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAlignmentModeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberAltitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Altitude", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAltitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberAltitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberAltitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Altitude", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAltitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberApertureAreaGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/ApertureArea", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberApertureAreaGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberApertureAreaGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberApertureAreaGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/ApertureArea", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberApertureAreaGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberApertureDiameterGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/ApertureDiameter", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberApertureDiameterGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberApertureDiameterGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberApertureDiameterGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/ApertureDiameter", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberApertureDiameterGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberAtHomeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/AtHome", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAtHomeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberAtHomeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberAtHomeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/AtHome", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAtHomeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberAtParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/AtPark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAtParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberAtParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberAtParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/AtPark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAtParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>AxisRatesResponse</returns>
        public AxisRatesResponse ApiV1TelescopeDeviceNumberAxisRatesGet(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<AxisRatesResponse> localVarResponse = ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfo(deviceNumber, axis, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of AxisRatesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<AxisRatesResponse> ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Axis", axis));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<AxisRatesResponse>("/api/v1/telescope/{DeviceNumber}/AxisRates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAxisRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AxisRatesResponse</returns>
        public async System.Threading.Tasks.Task<AxisRatesResponse> ApiV1TelescopeDeviceNumberAxisRatesGetAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AxisRatesResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfoAsync(deviceNumber, axis, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AxisRatesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AxisRatesResponse>> ApiV1TelescopeDeviceNumberAxisRatesGetWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Axis", axis));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AxisRatesResponse>("/api/v1/telescope/{DeviceNumber}/AxisRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAxisRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberAzimuthGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Azimuth", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAzimuthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberAzimuthGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberAzimuthGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Azimuth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberAzimuthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanFindHomeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanFindHome", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanFindHomeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanFindHomeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanFindHomeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanFindHome", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanFindHomeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanMoveAxisGet(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfo(deviceNumber, axis, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Axis", axis));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanMoveAxis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanMoveAxisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanMoveAxisGetAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfoAsync(deviceNumber, axis, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanMoveAxisGetWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Axis", axis));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanMoveAxis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanMoveAxisGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanPark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanPark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanPulseGuideGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanPulseGuide", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanPulseGuideGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanPulseGuideGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanPulseGuideGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanPulseGuide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanPulseGuideGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetDeclinationRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetDeclinationRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetDeclinationRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetDeclinationRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetGuideRatesGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetGuideRates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetGuideRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetGuideRatesGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetGuideRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetGuideRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetParkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetPark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetParkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetParkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetPark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetParkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetPierSideGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetPierSide", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetPierSideGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetPierSideGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetPierSideGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetPierSide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetPierSideGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetRightAscensionRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetRightAscensionRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetRightAscensionRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSetTrackingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetTracking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetTrackingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSetTrackingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSetTrackingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSetTracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSetTrackingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAltAzAsync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAltAzAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAltAzAsyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSlewAltAzGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAltAz", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAltAzGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAltAzGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAltAzGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAltAz", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAltAzGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSlewAsyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAsync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAsyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewAsyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewAsyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlewAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewAsyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSlewGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlew", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSlewGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSlewGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSlew", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSlewGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSyncAltAzGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSyncAltAz", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSyncAltAzGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncAltAzGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSyncAltAzGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSyncAltAz", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSyncAltAzGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanSyncGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanSyncGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanSyncGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanSync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanSyncGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberCanUnparkGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanUnpark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanUnparkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberCanUnparkGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberCanUnparkGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/CanUnpark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberCanUnparkGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Declination", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/Declination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberDeclinationRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/DeclinationRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberDeclinationRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberDeclinationRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/DeclinationRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberDeclinationRatePut(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfo(deviceNumber, declinationRate, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfo(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (declinationRate != null)
            {
                localVarRequestOptions.FormParameters.Add("DeclinationRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declinationRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/DeclinationRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDeclinationRatePutAsync(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfoAsync(deviceNumber, declinationRate, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="declinationRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberDeclinationRatePutWithHttpInfoAsync(int deviceNumber, double? declinationRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (declinationRate != null)
            {
                localVarRequestOptions.FormParameters.Add("DeclinationRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declinationRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/DeclinationRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDeclinationRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>PointingStateResponse</returns>
        public PointingStateResponse ApiV1TelescopeDeviceNumberDestinationSideOfPierGet(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> localVarResponse = ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfo(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PointingStateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "RightAscension", rightAscension));
            }
            if (declination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Declination", declination));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PointingStateResponse>("/api/v1/telescope/{DeviceNumber}/DestinationSideOfPier", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDestinationSideOfPierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PointingStateResponse</returns>
        public async System.Threading.Tasks.Task<PointingStateResponse> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> localVarResponse = await ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfoAsync(deviceNumber, rightAscension, declination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PointingStateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PointingStateResponse>> ApiV1TelescopeDeviceNumberDestinationSideOfPierGetWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "RightAscension", rightAscension));
            }
            if (declination != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "Declination", declination));
            }
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PointingStateResponse>("/api/v1/telescope/{DeviceNumber}/DestinationSideOfPier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDestinationSideOfPierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberDisposePut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberDisposePutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberDisposePutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/Dispose", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDisposePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDisposePutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberDisposePutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberDisposePutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/Dispose", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDisposePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberDoesRefractionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/DoesRefraction", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDoesRefractionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberDoesRefractionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberDoesRefractionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/DoesRefraction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDoesRefractionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberDoesRefractionPut(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfo(deviceNumber, doesRefraction, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfo(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (doesRefraction != null)
            {
                localVarRequestOptions.FormParameters.Add("DoesRefraction", Org.OpenAPITools.Client.ClientUtils.ParameterToString(doesRefraction)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/DoesRefraction", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDoesRefractionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberDoesRefractionPutAsync(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfoAsync(deviceNumber, doesRefraction, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="doesRefraction"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberDoesRefractionPutWithHttpInfoAsync(int deviceNumber, bool? doesRefraction = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (doesRefraction != null)
            {
                localVarRequestOptions.FormParameters.Add("DoesRefraction", Org.OpenAPITools.Client.ClientUtils.ParameterToString(doesRefraction)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/DoesRefraction", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberDoesRefractionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>EquatorialCoordinateTypeResponse</returns>
        public EquatorialCoordinateTypeResponse ApiV1TelescopeDeviceNumberEquatorialSystemGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<EquatorialCoordinateTypeResponse> localVarResponse = ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of EquatorialCoordinateTypeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<EquatorialCoordinateTypeResponse> ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<EquatorialCoordinateTypeResponse>("/api/v1/telescope/{DeviceNumber}/EquatorialSystem", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberEquatorialSystemGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EquatorialCoordinateTypeResponse</returns>
        public async System.Threading.Tasks.Task<EquatorialCoordinateTypeResponse> ApiV1TelescopeDeviceNumberEquatorialSystemGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<EquatorialCoordinateTypeResponse> localVarResponse = await ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EquatorialCoordinateTypeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<EquatorialCoordinateTypeResponse>> ApiV1TelescopeDeviceNumberEquatorialSystemGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<EquatorialCoordinateTypeResponse>("/api/v1/telescope/{DeviceNumber}/EquatorialSystem", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberEquatorialSystemGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberFindHomePut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/FindHome", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberFindHomePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberFindHomePutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberFindHomePutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/FindHome", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberFindHomePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberFocalLengthGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/FocalLength", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberFocalLengthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberFocalLengthGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberFocalLengthGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/FocalLength", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberFocalLengthGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberGuideRateDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/GuideRateDeclination", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberGuideRateDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/GuideRateDeclination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberGuideRateDeclinationPut(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfo(deviceNumber, guideRateDeclination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfo(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (guideRateDeclination != null)
            {
                localVarRequestOptions.FormParameters.Add("GuideRateDeclination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guideRateDeclination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/GuideRateDeclination", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateDeclinationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutAsync(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfoAsync(deviceNumber, guideRateDeclination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberGuideRateDeclinationPutWithHttpInfoAsync(int deviceNumber, double? guideRateDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (guideRateDeclination != null)
            {
                localVarRequestOptions.FormParameters.Add("GuideRateDeclination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guideRateDeclination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/GuideRateDeclination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateDeclinationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/GuideRateRightAscension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberGuideRateRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/GuideRateRightAscension", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfo(deviceNumber, guideRateRightAscension, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfo(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (guideRateRightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("GuideRateRightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guideRateRightAscension)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/GuideRateRightAscension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutAsync(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfoAsync(deviceNumber, guideRateRightAscension, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="guideRateRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberGuideRateRightAscensionPutWithHttpInfoAsync(int deviceNumber, double? guideRateRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (guideRateRightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("GuideRateRightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guideRateRightAscension)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/GuideRateRightAscension", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberGuideRateRightAscensionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberIsPulseGuidingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/IsPulseGuiding", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberIsPulseGuidingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberIsPulseGuidingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberIsPulseGuidingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/IsPulseGuiding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberIsPulseGuidingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberMoveAxisPut(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfo(deviceNumber, axis, rate, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfo(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.FormParameters.Add("Axis", Org.OpenAPITools.Client.ClientUtils.ParameterToString(axis)); // form parameter
            }
            if (rate != null)
            {
                localVarRequestOptions.FormParameters.Add("Rate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/MoveAxis", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberMoveAxisPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberMoveAxisPutAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfoAsync(deviceNumber, axis, rate, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="axis"> (optional)</param>
        /// <param name="rate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberMoveAxisPutWithHttpInfoAsync(int deviceNumber, TelescopeAxis? axis = default(TelescopeAxis?), double? rate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (axis != null)
            {
                localVarRequestOptions.FormParameters.Add("Axis", Org.OpenAPITools.Client.ClientUtils.ParameterToString(axis)); // form parameter
            }
            if (rate != null)
            {
                localVarRequestOptions.FormParameters.Add("Rate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/MoveAxis", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberMoveAxisPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberParkPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/Park", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberParkPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/Park", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberPulseGuidePut(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfo(deviceNumber, direction, duration, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfo(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.FormParameters.Add("Direction", Org.OpenAPITools.Client.ClientUtils.ParameterToString(direction)); // form parameter
            }
            if (duration != null)
            {
                localVarRequestOptions.FormParameters.Add("Duration", Org.OpenAPITools.Client.ClientUtils.ParameterToString(duration)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/PulseGuide", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberPulseGuidePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberPulseGuidePutAsync(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfoAsync(deviceNumber, direction, duration, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="direction"> (optional)</param>
        /// <param name="duration"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberPulseGuidePutWithHttpInfoAsync(int deviceNumber, GuideDirection direction = default(GuideDirection), int? duration = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (direction != null)
            {
                localVarRequestOptions.FormParameters.Add("Direction", Org.OpenAPITools.Client.ClientUtils.ParameterToString(direction)); // form parameter
            }
            if (duration != null)
            {
                localVarRequestOptions.FormParameters.Add("Duration", Org.OpenAPITools.Client.ClientUtils.ParameterToString(duration)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/PulseGuide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberPulseGuidePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/RightAscension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/RightAscension", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberRightAscensionRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/RightAscensionRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberRightAscensionRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberRightAscensionRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/RightAscensionRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberRightAscensionRatePut(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfo(deviceNumber, rightAscensionRate, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfo(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscensionRate != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscensionRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscensionRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/RightAscensionRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberRightAscensionRatePutAsync(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfoAsync(deviceNumber, rightAscensionRate, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscensionRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberRightAscensionRatePutWithHttpInfoAsync(int deviceNumber, double? rightAscensionRate = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscensionRate != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscensionRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscensionRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/RightAscensionRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberRightAscensionRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSetParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SetPark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSetParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSetParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSetParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SetPark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSetParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>PointingStateResponse</returns>
        public PointingStateResponse ApiV1TelescopeDeviceNumberSideOfPierGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> localVarResponse = ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of PointingStateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<PointingStateResponse>("/api/v1/telescope/{DeviceNumber}/SideOfPier", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSideOfPierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PointingStateResponse</returns>
        public async System.Threading.Tasks.Task<PointingStateResponse> ApiV1TelescopeDeviceNumberSideOfPierGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PointingStateResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PointingStateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PointingStateResponse>> ApiV1TelescopeDeviceNumberSideOfPierGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PointingStateResponse>("/api/v1/telescope/{DeviceNumber}/SideOfPier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSideOfPierGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSideOfPierPut(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfo(deviceNumber, sideOfPier, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfo(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (sideOfPier != null)
            {
                localVarRequestOptions.FormParameters.Add("SideOfPier", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sideOfPier)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SideOfPier", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSideOfPierPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSideOfPierPutAsync(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfoAsync(deviceNumber, sideOfPier, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="sideOfPier"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSideOfPierPutWithHttpInfoAsync(int deviceNumber, PointingState? sideOfPier = default(PointingState?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (sideOfPier != null)
            {
                localVarRequestOptions.FormParameters.Add("SideOfPier", Org.OpenAPITools.Client.ClientUtils.ParameterToString(sideOfPier)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SideOfPier", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSideOfPierPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberSiderealTimeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiderealTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiderealTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiderealTimeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiderealTimeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiderealTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiderealTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberSiteElevationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteElevation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteElevationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteElevationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteElevationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteElevation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteElevationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSiteElevationPut(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfo(deviceNumber, siteElevation, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfo(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteElevation != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteElevation", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteElevation)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SiteElevation", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteElevationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteElevationPutAsync(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfoAsync(deviceNumber, siteElevation, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteElevation"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteElevationPutWithHttpInfoAsync(int deviceNumber, double? siteElevation = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteElevation != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteElevation", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteElevation)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SiteElevation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteElevationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberSiteLatitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteLatitude", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLatitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLatitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteLatitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteLatitude", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLatitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSiteLatitudePut(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfo(deviceNumber, siteLatitude, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfo(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteLatitude != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteLatitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteLatitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SiteLatitude", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLatitudePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteLatitudePutAsync(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfoAsync(deviceNumber, siteLatitude, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLatitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteLatitudePutWithHttpInfoAsync(int deviceNumber, double? siteLatitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteLatitude != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteLatitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteLatitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SiteLatitude", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLatitudePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberSiteLongitudeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteLongitude", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLongitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberSiteLongitudeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberSiteLongitudeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/SiteLongitude", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLongitudeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSiteLongitudePut(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfo(deviceNumber, siteLongitude, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfo(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteLongitude != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteLongitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteLongitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SiteLongitude", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLongitudePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSiteLongitudePutAsync(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfoAsync(deviceNumber, siteLongitude, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="siteLongitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSiteLongitudePutWithHttpInfoAsync(int deviceNumber, double? siteLongitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (siteLongitude != null)
            {
                localVarRequestOptions.FormParameters.Add("SiteLongitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(siteLongitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SiteLongitude", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSiteLongitudePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>IntResponse</returns>
        public IntResponse ApiV1TelescopeDeviceNumberSlewSettleTimeGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of IntResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<IntResponse> ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<IntResponse>("/api/v1/telescope/{DeviceNumber}/SlewSettleTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewSettleTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IntResponse</returns>
        public async System.Threading.Tasks.Task<IntResponse> ApiV1TelescopeDeviceNumberSlewSettleTimeGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<IntResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IntResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IntResponse>> ApiV1TelescopeDeviceNumberSlewSettleTimeGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IntResponse>("/api/v1/telescope/{DeviceNumber}/SlewSettleTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewSettleTimeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewSettleTimePut(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfo(deviceNumber, slewSettleTime, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfo(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (slewSettleTime != null)
            {
                localVarRequestOptions.FormParameters.Add("SlewSettleTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slewSettleTime)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewSettleTime", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewSettleTimePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewSettleTimePutAsync(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfoAsync(deviceNumber, slewSettleTime, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="slewSettleTime"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewSettleTimePutWithHttpInfoAsync(int deviceNumber, int? slewSettleTime = default(int?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (slewSettleTime != null)
            {
                localVarRequestOptions.FormParameters.Add("SlewSettleTime", Org.OpenAPITools.Client.ClientUtils.ParameterToString(slewSettleTime)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewSettleTime", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewSettleTimePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfo(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToAltAzAsync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfoAsync(deviceNumber, azimuth, altitude, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToAltAzAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToAltAzAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToAltAzPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfo(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToAltAz", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToAltAzPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToAltAzPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfoAsync(deviceNumber, azimuth, altitude, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToAltAzPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToAltAz", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToAltAzPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfo(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToCoordinatesAsync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfoAsync(deviceNumber, rightAscension, declination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToCoordinatesAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToCoordinatesAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToCoordinatesPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfo(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToCoordinates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToCoordinatesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfoAsync(deviceNumber, rightAscension, declination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToCoordinatesPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToCoordinates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToCoordinatesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToTargetAsync", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToTargetAsyncPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToTargetAsync", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToTargetAsyncPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSlewToTargetPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SlewToTarget", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToTargetPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSlewToTargetPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSlewToTargetPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SlewToTarget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewToTargetPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberSlewingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/Slewing", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberSlewingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberSlewingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/Slewing", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSlewingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSyncToAltAzPut(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfo(deviceNumber, azimuth, altitude, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfo(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SyncToAltAz", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToAltAzPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToAltAzPutAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfoAsync(deviceNumber, azimuth, altitude, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="azimuth"> (optional)</param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToAltAzPutWithHttpInfoAsync(int deviceNumber, double? azimuth = default(double?), double? altitude = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (azimuth != null)
            {
                localVarRequestOptions.FormParameters.Add("Azimuth", Org.OpenAPITools.Client.ClientUtils.ParameterToString(azimuth)); // form parameter
            }
            if (altitude != null)
            {
                localVarRequestOptions.FormParameters.Add("Altitude", Org.OpenAPITools.Client.ClientUtils.ParameterToString(altitude)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SyncToAltAz", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToAltAzPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSyncToCoordinatesPut(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfo(deviceNumber, rightAscension, declination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfo(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SyncToCoordinates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToCoordinatesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfoAsync(deviceNumber, rightAscension, declination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="rightAscension"> (optional)</param>
        /// <param name="declination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToCoordinatesPutWithHttpInfoAsync(int deviceNumber, double? rightAscension = default(double?), double? declination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (rightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("RightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(rightAscension)); // form parameter
            }
            if (declination != null)
            {
                localVarRequestOptions.FormParameters.Add("Declination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(declination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SyncToCoordinates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToCoordinatesPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberSyncToTargetPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/SyncToTarget", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToTargetPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberSyncToTargetPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberSyncToTargetPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/SyncToTarget", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberSyncToTargetPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberTargetDeclinationGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/TargetDeclination", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberTargetDeclinationGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberTargetDeclinationGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/TargetDeclination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetDeclinationGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberTargetDeclinationPut(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfo(deviceNumber, targetDeclination, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfo(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (targetDeclination != null)
            {
                localVarRequestOptions.FormParameters.Add("TargetDeclination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(targetDeclination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/TargetDeclination", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetDeclinationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTargetDeclinationPutAsync(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfoAsync(deviceNumber, targetDeclination, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetDeclination"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberTargetDeclinationPutWithHttpInfoAsync(int deviceNumber, double? targetDeclination = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (targetDeclination != null)
            {
                localVarRequestOptions.FormParameters.Add("TargetDeclination", Org.OpenAPITools.Client.ClientUtils.ParameterToString(targetDeclination)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/TargetDeclination", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetDeclinationPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DoubleResponse</returns>
        public DoubleResponse ApiV1TelescopeDeviceNumberTargetRightAscensionGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DoubleResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DoubleResponse> ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/TargetRightAscension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DoubleResponse</returns>
        public async System.Threading.Tasks.Task<DoubleResponse> ApiV1TelescopeDeviceNumberTargetRightAscensionGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DoubleResponse> localVarResponse = await ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DoubleResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DoubleResponse>> ApiV1TelescopeDeviceNumberTargetRightAscensionGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DoubleResponse>("/api/v1/telescope/{DeviceNumber}/TargetRightAscension", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetRightAscensionGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberTargetRightAscensionPut(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfo(deviceNumber, targetRightAscension, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfo(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (targetRightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("TargetRightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(targetRightAscension)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/TargetRightAscension", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetRightAscensionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTargetRightAscensionPutAsync(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfoAsync(deviceNumber, targetRightAscension, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="targetRightAscension"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberTargetRightAscensionPutWithHttpInfoAsync(int deviceNumber, double? targetRightAscension = default(double?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (targetRightAscension != null)
            {
                localVarRequestOptions.FormParameters.Add("TargetRightAscension", Org.OpenAPITools.Client.ClientUtils.ParameterToString(targetRightAscension)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/TargetRightAscension", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTargetRightAscensionPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>BoolResponse</returns>
        public BoolResponse ApiV1TelescopeDeviceNumberTrackingGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of BoolResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<BoolResponse> ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<BoolResponse>("/api/v1/telescope/{DeviceNumber}/Tracking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BoolResponse</returns>
        public async System.Threading.Tasks.Task<BoolResponse> ApiV1TelescopeDeviceNumberTrackingGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<BoolResponse> localVarResponse = await ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BoolResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<BoolResponse>> ApiV1TelescopeDeviceNumberTrackingGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BoolResponse>("/api/v1/telescope/{DeviceNumber}/Tracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberTrackingPut(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfo(deviceNumber, tracking, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfo(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (tracking != null)
            {
                localVarRequestOptions.FormParameters.Add("Tracking", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tracking)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/Tracking", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTrackingPutAsync(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfoAsync(deviceNumber, tracking, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="tracking"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberTrackingPutWithHttpInfoAsync(int deviceNumber, bool? tracking = default(bool?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (tracking != null)
            {
                localVarRequestOptions.FormParameters.Add("Tracking", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tracking)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/Tracking", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DriveRateResponse</returns>
        public DriveRateResponse ApiV1TelescopeDeviceNumberTrackingRateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DriveRateResponse> localVarResponse = ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DriveRateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DriveRateResponse> ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DriveRateResponse>("/api/v1/telescope/{DeviceNumber}/TrackingRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DriveRateResponse</returns>
        public async System.Threading.Tasks.Task<DriveRateResponse> ApiV1TelescopeDeviceNumberTrackingRateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DriveRateResponse> localVarResponse = await ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DriveRateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DriveRateResponse>> ApiV1TelescopeDeviceNumberTrackingRateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DriveRateResponse>("/api/v1/telescope/{DeviceNumber}/TrackingRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberTrackingRatePut(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfo(deviceNumber, trackingRate, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfo(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (trackingRate != null)
            {
                localVarRequestOptions.FormParameters.Add("TrackingRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/TrackingRate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberTrackingRatePutAsync(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfoAsync(deviceNumber, trackingRate, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="trackingRate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberTrackingRatePutWithHttpInfoAsync(int deviceNumber, DriveRate? trackingRate = default(DriveRate?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (trackingRate != null)
            {
                localVarRequestOptions.FormParameters.Add("TrackingRate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(trackingRate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/TrackingRate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DriveRatesResponse</returns>
        public DriveRatesResponse ApiV1TelescopeDeviceNumberTrackingRatesGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DriveRatesResponse> localVarResponse = ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DriveRatesResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DriveRatesResponse> ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DriveRatesResponse>("/api/v1/telescope/{DeviceNumber}/TrackingRates", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DriveRatesResponse</returns>
        public async System.Threading.Tasks.Task<DriveRatesResponse> ApiV1TelescopeDeviceNumberTrackingRatesGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DriveRatesResponse> localVarResponse = await ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DriveRatesResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DriveRatesResponse>> ApiV1TelescopeDeviceNumberTrackingRatesGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DriveRatesResponse>("/api/v1/telescope/{DeviceNumber}/TrackingRates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberTrackingRatesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>DateTimeResponse</returns>
        public DateTimeResponse ApiV1TelescopeDeviceNumberUTCDateGet(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<DateTimeResponse> localVarResponse = ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of DateTimeResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<DateTimeResponse> ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get<DateTimeResponse>("/api/v1/telescope/{DeviceNumber}/UTCDate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUTCDateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DateTimeResponse</returns>
        public async System.Threading.Tasks.Task<DateTimeResponse> ApiV1TelescopeDeviceNumberUTCDateGetAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<DateTimeResponse> localVarResponse = await ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DateTimeResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<DateTimeResponse>> ApiV1TelescopeDeviceNumberUTCDateGetWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientID", clientID));
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "ClientTransactionID", clientTransactionID));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DateTimeResponse>("/api/v1/telescope/{DeviceNumber}/UTCDate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUTCDateGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberUTCDatePut(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfo(deviceNumber, uTCDate, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfo(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (uTCDate != null)
            {
                localVarRequestOptions.FormParameters.Add("UTCDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(uTCDate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/UTCDate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUTCDatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberUTCDatePutAsync(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfoAsync(deviceNumber, uTCDate, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="uTCDate"> (optional)</param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberUTCDatePutWithHttpInfoAsync(int deviceNumber, DateTime? uTCDate = default(DateTime?), int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (uTCDate != null)
            {
                localVarRequestOptions.FormParameters.Add("UTCDate", Org.OpenAPITools.Client.ClientUtils.ParameterToString(uTCDate)); // form parameter
            }
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/UTCDate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUTCDatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>Response</returns>
        public Response ApiV1TelescopeDeviceNumberUnParkPut(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfo(deviceNumber, clientID, clientTransactionID);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <returns>ApiResponse of Response</returns>
        public Org.OpenAPITools.Client.ApiResponse<Response> ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfo(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request
            var localVarResponse = this.Client.Put<Response>("/api/v1/telescope/{DeviceNumber}/UnPark", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUnParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ApiV1TelescopeDeviceNumberUnParkPutAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Response> localVarResponse = await ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfoAsync(deviceNumber, clientID, clientTransactionID, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="deviceNumber"></param>
        /// <param name="clientID"> (optional, default to -1)</param>
        /// <param name="clientTransactionID"> (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Response>> ApiV1TelescopeDeviceNumberUnParkPutWithHttpInfoAsync(int deviceNumber, int? clientID = default(int?), int? clientTransactionID = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("DeviceNumber", Org.OpenAPITools.Client.ClientUtils.ParameterToString(deviceNumber)); // path parameter
            if (clientID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientID)); // form parameter
            }
            if (clientTransactionID != null)
            {
                localVarRequestOptions.FormParameters.Add("ClientTransactionID", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientTransactionID)); // form parameter
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Response>("/api/v1/telescope/{DeviceNumber}/UnPark", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1TelescopeDeviceNumberUnParkPut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
